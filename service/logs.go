package service

import (
	"bufio"
	"fmt"
	"github.com/logrusorgru/aurora/v4"
	"math/rand"
	"os"
	"time"
)

var stockLogs = map[int]string{
	0: "Ошибка при отгрузке товара. Количество товаров на складе не соответствует указанному в накладной",
	1: "Поступила партия товаров в количестве 500 штук. Текущее количество товаров на складе: 1750 штук",
	2: "Отгружено 200 штук товара. Остаток на складе: 1550 штук",
	3: "Возврат товара в количестве 50 штук. Общее количество товаров на складе: 1600 штук",
	4: "Инвентаризация проведена успешно. Общее количество товаров на складе: 1250 штук",
	5: "Проведен подсчет товара. Общее количество товаров на складе: 1600 штук",
	6: "Отгружено 100 штук товара. Остаток на складе: 1500 штук",
	7: "Поступила партия товаров в количестве 300 штук. Текущее количество товаров на складе: 1800 штук",
	8: "Проведен инвентарь. Общее количество товаров на складе: 1800 штук",
	9: "Отгружено 50 штук товара. Остаток на складе: 1750 штук",
}

var pvzLogs = map[int]string{
	0: "Ошибка при выдаче заказа №654. Не хватает товара на складе.",
	1: "Заказ №456 подготовлен к выдаче.",
	2: "Заказ №789 выдан клиенту Петровой П.П.",
	3: "Заказ №321 отменен клиентом.",
	4: "Заказ №123 выдан клиенту Иванову И.И.",
	5: "Заказ №987 подготовлен к выдаче.",
	6: "Заказ №135 выдан клиенту Сидорову С.С.",
	7: "Заказ №246 подготовлен к выдаче",
	8: "Заказ №579 выдан клиенту Кузнецовой К.К",
	9: "Заказ №864 отменен клиентом.",
}

func (ui UI) Logs() {
	fmt.Println("[ 1 ] : Логи склада")
	fmt.Println("[ 2 ] : Логи ПВЗ")
	fmt.Println("[ 0 ] : Назад")

	switch ui.Input() {
	case "1":
		ui.PrintLogs(stockLogs)
	case "2":
		ui.PrintLogs(pvzLogs)
	case "0":
		ui.CommandPanel()
	default:
		fmt.Println("такого раздела не существует или произошла ошибка при вводе")
		ui.Logs()
	}
}

func (ui UI) PrintLogs(logMap map[int]string) {
	ui.ClearConsole()
	fmt.Println(aurora.BrightGreen("для возвращения назад нажмите любую клавишу"))
	done := make(chan bool, 1)

	go func() {
		bufio.NewReader(os.Stdin).ReadByte()
		done <- true
	}()

	for {
		select {
		case <-done:
			ui.Logs()
			return
		default:
			logInt := rand.Intn(len(logMap))
			if logInt == 0 {
				fmt.Println(aurora.BrightRed(logMap[logInt]))
				time.Sleep(2 * time.Second)
				continue
			}
			fmt.Println(logMap[logInt])
			time.Sleep(1 * time.Second)
		}
	}
}
